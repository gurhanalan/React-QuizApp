{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","Quiz.js","App.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","isModalOpen","setIsModalOpen","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","nextQuestion","oldIndex","openModal","Provider","value","checkAnswer","old","closeModal","handleChange","e","target","name","handleSubmit","preventDefault","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","min","max","onChange","onClick","Loading","Modal","toFixed","Quiz","question","incorrect_answers","correct_answer","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGMA,EAAQ,CACVC,OAAQ,GACRC,QAAS,GACTC,SAAU,IAKRC,EAAaC,IAAMC,gBAEnBC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,oBAAS,GADL,mBAC3BC,EAD2B,KAClBC,EADkB,OAEJF,oBAAS,GAFL,mBAE3BG,EAF2B,KAElBC,EAFkB,OAGAJ,mBAAS,IAHT,mBAG3BK,EAH2B,KAGhBC,EAHgB,OAIRN,mBAAS,GAJD,mBAI3BO,EAJ2B,KAIpBC,EAJoB,OAKJR,mBAAS,GALL,mBAK3BS,EAL2B,KAKlBC,EALkB,OAMRV,oBAAS,GAND,mBAM3BW,EAN2B,KAMpBC,EANoB,OAOVZ,mBAAS,CAC7Ba,OAAQ,GACRC,SAAU,SACVC,WAAY,SAVkB,mBAO3BC,EAP2B,KAOrBC,EAPqB,OAYIjB,oBAAS,GAZb,mBAY3BkB,EAZ2B,KAYdC,EAZc,KAc5BC,EAAc,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACnBlB,GAAW,GACXF,GAAW,GAFQ,SAGIqB,IAAMF,GAAKG,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAH1C,QAGbG,EAHa,SAMTC,EAAOD,EAASC,KAAKC,SAClBC,OAAS,GACdzB,EAAauB,GACbzB,GAAW,GACXF,GAAW,GACXU,GAAS,KAETV,GAAW,GACXU,GAAS,IAGbV,GAAW,GAjBI,2CAAH,sDAqBd8B,EAAe,WACjBxB,GAAS,SAACyB,GACN,IAAM1B,EAAQ0B,EAAW,EACzB,OAAI1B,EAAQF,EAAU0B,OAAS,GAC3BG,IACO7B,EAAU0B,QAEVxB,MAYb2B,EAAY,WACdf,GAAe,IAuBnB,OACI,kBAACxB,EAAWwC,SAAZ,CACIC,MAAO,CACHnC,UACAE,UACAE,YACAE,QACAE,UACAE,QACAO,cACAc,eACAK,YA1CQ,SAACD,GACbA,GACA1B,GAAW,SAAC4B,GAAD,OAASA,EAAM,KAE9BN,KAuCQO,WAhCO,WACfpB,GAAe,GACfjB,GAAW,GACXQ,EAAW,GACXF,EAAS,IA6BDgC,aA1BS,SAACC,GAClBxB,EAAQ,2BAAKD,GAAN,kBAAayB,EAAEC,OAAOC,KAAOF,EAAEC,OAAON,UA0BrCQ,aAxBS,SAACH,GAClBA,EAAEI,iBAEF,IAAMxB,EAAG,UA3EI,+BA2EJ,kBAA4BL,EAAKH,OAAjC,uBACLG,EAAKD,WADA,qBAEIxB,EAAMyB,EAAKF,UAFf,kBAITM,EAAeC,IAkBPL,SAGHjB,IAKA+C,EAAmB,WAC5B,OAAOC,qBAAWpD,IC3CPqD,EArEG,WAAO,IAAD,EACgCF,IAA5CN,EADY,EACZA,aAAcI,EADF,EACEA,aAAc5B,EADhB,EACgBA,KAAML,EADtB,EACsBA,MAC1C,OACI,8BACI,6BAASsC,UAAU,mBACf,0BAAMA,UAAU,cAEZ,yBAAKA,UAAU,gBACX,2BAAOC,QAAQ,UAAf,uBACA,2BACIC,KAAK,SACLR,KAAK,SACLS,GAAG,SACHH,UAAU,aACVI,IAAK,EACLC,IAAK,GACLC,SAAUf,EACVJ,MAAOpB,EAAKH,UAIpB,yBAAKoC,UAAU,gBACX,2BAAOC,QAAQ,YAAf,YACA,4BACIP,KAAK,WACLS,GAAG,WACHH,UAAU,aACVM,SAAUf,EACVJ,MAAOpB,EAAKF,UAEZ,4BAAQsB,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,cAIR,yBAAKa,UAAU,gBACX,2BAAOC,QAAQ,cAAf,cACA,4BACIP,KAAK,aACLS,GAAG,aACHH,UAAU,aACVM,SAAUf,EACVJ,MAAOpB,EAAKD,YAEZ,4BAAQqB,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,UAGPzB,GACG,uBAAGsC,UAAU,SAAb,0DAKJ,4BACIE,KAAK,SACLF,UAAU,aACVO,QAASZ,GAHb,aCjDLa,EARC,WACd,OACE,8BACE,yBAAKR,UAAU,c,QCsBNS,EAxBD,WAAO,IAAD,EACwCZ,IAAhD5B,EADQ,EACRA,YAAaqB,EADL,EACKA,WAAY9B,EADjB,EACiBA,QAASJ,EAD1B,EAC0BA,UAE1C,OACI,yBACI4C,UACI/B,EAAc,yBAA2B,mBAG7C,yBAAK+B,UAAU,iBACX,yCACA,0CACiB,KACVxC,EAAUJ,EAAU0B,OAAU,KAAK4B,QAAQ,GAFlD,4BAKA,4BAAQV,UAAU,YAAYO,QAASjB,GAAvC,iBCoCDqB,EAnDF,WAAO,IAAD,EAEXd,IADIzC,EADO,EACPA,UAAWE,EADJ,EACIA,MAAOE,EADX,EACWA,QAASuB,EADpB,EACoBA,aAAcK,EADlC,EACkCA,YADlC,EAKXhC,EAAUE,EAAQ,GADdsD,EAJO,EAIPA,SAAUC,EAJH,EAIGA,kBAAmBC,EAJtB,EAIsBA,eAG/BC,EAAO,YAAOF,GACdG,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UASlC,OAPkB,IAAdH,EACAD,EAAQK,KAAKN,IAEbC,EAAQK,KAAKL,EAAQC,IACrBD,EAAQC,GAAaF,GAIrB,8BACI,kBAAC,EAAD,MACA,6BAASd,UAAU,QACf,uBAAGA,UAAU,mBAAb,qBACuBxC,EADvB,MACmCF,GAEnC,6BAAS0C,UAAU,aACf,wBAAIqB,wBAAyB,CAAEC,OAAQV,KACvC,yBAAKZ,UAAU,iBACVe,EAAQQ,KAAI,SAACC,EAAQlE,GAAT,OACT,4BACImE,IAAKnE,EACL0C,UAAS,qBACLwB,IAAWV,EACL,UACA,SAEVP,QAAS,WACLnB,EAAYoC,IAAWV,IAE3BO,wBAAyB,CAAEC,OAAQE,UAKnD,4BAAQxB,UAAU,gBAAgBO,QAASxB,GAA3C,oBC5BD2C,MAZf,WAAgB,IAAD,EACkB7B,IAArB7C,EADG,EACHA,QAASE,EADN,EACMA,QACjB,OAAIF,EACO,kBAAC,EAAD,MAEPE,EACO,kBAAC,EAAD,MAGJ,kBAAC,EAAD,OCVXyE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.ba748d37.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { useState, useContext } from \"react\";\n\nconst table = {\n    sports: 21,\n    history: 23,\n    politics: 24,\n};\n\nconst API_ENDPOINT = \"https://opentdb.com/api.php?\";\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n    const [waiting, setWaiting] = useState(true);\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState([]);\n    const [index, setIndex] = useState(1);\n    const [correct, setCorrect] = useState(0);\n    const [error, setError] = useState(false);\n    const [quiz, setQuiz] = useState({\n        amount: 10,\n        category: \"sports\",\n        difficulty: \"easy\",\n    });\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const fetchQuestions = async (url) => {\n        setLoading(true);\n        setWaiting(false);\n        const response = await axios(url).catch((err) => console.log(err));\n\n        if (response) {\n            const data = response.data.results;\n            if (data.length > 0) {\n                setQuestions(data);\n                setLoading(false);\n                setWaiting(false);\n                setError(false);\n            } else {\n                setWaiting(true);\n                setError(true);\n            }\n        } else {\n            setWaiting(true);\n        }\n    };\n\n    const nextQuestion = () => {\n        setIndex((oldIndex) => {\n            const index = oldIndex + 1;\n            if (index > questions.length - 1) {\n                openModal();\n                return questions.length;\n            } else {\n                return index;\n            }\n        });\n    };\n\n    const checkAnswer = (value) => {\n        if (value) {\n            setCorrect((old) => old + 1);\n        }\n        nextQuestion();\n    };\n\n    const openModal = () => {\n        setIsModalOpen(true);\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setWaiting(true);\n        setCorrect(0);\n        setIndex(0);\n    };\n\n    const handleChange = (e) => {\n        setQuiz({ ...quiz, [e.target.name]: e.target.value });\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const url = `${API_ENDPOINT}amount=${quiz.amount}&difficulty=${\n            quiz.difficulty\n        }&category=${table[quiz.category]}&type=multiple`;\n\n        fetchQuestions(url);\n    };\n\n    return (\n        <AppContext.Provider\n            value={{\n                waiting,\n                loading,\n                questions,\n                index,\n                correct,\n                error,\n                isModalOpen,\n                nextQuestion,\n                checkAnswer,\n                closeModal,\n                handleChange,\n                handleSubmit,\n                quiz,\n            }}\n        >\n            {children}\n        </AppContext.Provider>\n    );\n};\n// make sure use\nexport const useGlobalContext = () => {\n    return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst SetupForm = () => {\n    const { handleChange, handleSubmit, quiz, error } = useGlobalContext();\n    return (\n        <main>\n            <section className=\"quiz quiz-small\">\n                <form className=\"setup-form\">\n                    {/* amount */}\n                    <div className=\"form-control\">\n                        <label htmlFor=\"amount\">number of questions</label>\n                        <input\n                            type=\"number\"\n                            name=\"amount\"\n                            id=\"amount\"\n                            className=\"form-input\"\n                            min={1}\n                            max={50}\n                            onChange={handleChange}\n                            value={quiz.amount}\n                        />\n                    </div>\n                    {/* category */}\n                    <div className=\"form-control\">\n                        <label htmlFor=\"category\">category</label>\n                        <select\n                            name=\"category\"\n                            id=\"category\"\n                            className=\"form-input\"\n                            onChange={handleChange}\n                            value={quiz.category}\n                        >\n                            <option value=\"sports\">sports</option>\n                            <option value=\"history\">history</option>\n                            <option value=\"politics\">politics</option>\n                        </select>\n                    </div>\n                    {/* difficulty */}\n                    <div className=\"form-control\">\n                        <label htmlFor=\"difficulty\">difficulty</label>\n                        <select\n                            name=\"difficulty\"\n                            id=\"difficulty\"\n                            className=\"form-input\"\n                            onChange={handleChange}\n                            value={quiz.difficulty}\n                        >\n                            <option value=\"easy\">easy</option>\n                            <option value=\"medium\">medium</option>\n                            <option value=\"hard\">hard</option>\n                        </select>\n                    </div>\n                    {error && (\n                        <p className=\"error\">\n                            can't generate questions, please try different\n                            options\n                        </p>\n                    )}\n                    <button\n                        type=\"submit\"\n                        className=\"submit-btn\"\n                        onClick={handleSubmit}\n                    >\n                        start\n                    </button>\n                </form>\n            </section>\n        </main>\n    );\n};\n\nexport default SetupForm;\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <main>\n      <div className='loading'></div>\n    </main>\n  )\n}\n\nexport default Loading\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst Modal = () => {\n    const { isModalOpen, closeModal, correct, questions } = useGlobalContext();\n\n    return (\n        <div\n            className={\n                isModalOpen ? \"modal-container isOpen\" : \"modal-container\"\n            }\n        >\n            <div className=\"modal-content\">\n                <h2>congrats!</h2>\n                <p>\n                    You answered{\" \"}\n                    {((correct / questions.length) * 100).toFixed(0)}% of\n                    questions correctly\n                </p>\n                <button className=\"close-btn\" onClick={closeModal}>\n                    play again\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Modal;\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst Quiz = () => {\r\n    const { questions, index, correct, nextQuestion, checkAnswer } =\r\n        useGlobalContext();\r\n\r\n    const { question, incorrect_answers, correct_answer } =\r\n        questions[index - 1];\r\n\r\n    const answers = [...incorrect_answers];\r\n    const tempIndex = Math.floor(Math.random() * 4);\r\n\r\n    if (tempIndex === 3) {\r\n        answers.push(correct_answer);\r\n    } else {\r\n        answers.push(answers[tempIndex]);\r\n        answers[tempIndex] = correct_answer;\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Modal />\r\n            <section className=\"quiz\">\r\n                <p className=\"correct-answers\">\r\n                    correct answers : {correct} / {index}\r\n                </p>\r\n                <article className=\"container\">\r\n                    <h2 dangerouslySetInnerHTML={{ __html: question }} />\r\n                    <div className=\"btn-container\">\r\n                        {answers.map((answer, index) => (\r\n                            <button\r\n                                key={index}\r\n                                className={`answer-btn ${\r\n                                    answer === correct_answer\r\n                                        ? \"correct\"\r\n                                        : \"wrong\"\r\n                                }`}\r\n                                onClick={() => {\r\n                                    checkAnswer(answer === correct_answer);\r\n                                }}\r\n                                dangerouslySetInnerHTML={{ __html: answer }}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </article>\r\n                <button className=\"next-question\" onClick={nextQuestion}>\r\n                    next question\r\n                </button>\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nimport SetupForm from \"./SetupForm\";\nimport Loading from \"./Loading\";\nimport Quiz from \"./Quiz\";\n\nfunction App() {\n    const { waiting, loading } = useGlobalContext();\n    if (waiting) {\n        return <SetupForm />;\n    }\n    if (loading) {\n        return <Loading />;\n    }\n\n    return <Quiz />;\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}